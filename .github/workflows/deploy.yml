name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write # Changed from read to write for PR preview deployments
  pages: write
  id-token: write
  pull-requests: write # Added to allow commenting on PRs

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'pages' }}
  cancel-in-progress: false

jobs:
  # Build job for production (main branch)
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          VITE_BASE_PATH: /guessemon/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # Deployment job for production
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Build and deploy PR previews
  pr-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanitize branch name for URL
        id: sanitize
        run: |
          # Replace / with - for URL-safe branch name
          BRANCH_NAME="${{ github.head_ref }}"
          SANITIZED_NAME="${BRANCH_NAME//\//-}"
          echo "branch_name=${SANITIZED_NAME}" >> $GITHUB_OUTPUT
          echo "Sanitized branch name: ${SANITIZED_NAME}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build PR Preview
        run: npm run build
        env:
          VITE_BASE_PATH: /guessemon/pr-preview/${{ steps.sanitize.outputs.branch_name }}/

      - name: Deploy PR Preview to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          destination_dir: pr-preview/${{ steps.sanitize.outputs.branch_name }}
          keep_files: true # Don't delete other preview folders

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = `https://${{ github.repository_owner }}.github.io/guessemon/pr-preview/${{ steps.sanitize.outputs.branch_name }}/`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview deployed')
            );

            const commentBody = `ðŸš€ **Preview deployed!**\n\nâœ¨ Preview URL: ${previewUrl}\n\n_Updated: ${new Date().toUTCString()}_`;

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
